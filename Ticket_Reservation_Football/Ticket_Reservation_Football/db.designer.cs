#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ticket_Reservation_Football
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="UEFA_Ticket")]
	public partial class dbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPayment(Payment instance);
    partial void UpdatePayment(Payment instance);
    partial void DeletePayment(Payment instance);
    partial void InsertResultSoccer(ResultSoccer instance);
    partial void UpdateResultSoccer(ResultSoccer instance);
    partial void DeleteResultSoccer(ResultSoccer instance);
    partial void InsertResultSoccerTotal(ResultSoccerTotal instance);
    partial void UpdateResultSoccerTotal(ResultSoccerTotal instance);
    partial void DeleteResultSoccerTotal(ResultSoccerTotal instance);
    partial void InsertSoccerMatch(SoccerMatch instance);
    partial void UpdateSoccerMatch(SoccerMatch instance);
    partial void DeleteSoccerMatch(SoccerMatch instance);
    partial void InsertWinner(Winner instance);
    partial void UpdateWinner(Winner instance);
    partial void DeleteWinner(Winner instance);
    partial void InsertNameRoundd(NameRoundd instance);
    partial void UpdateNameRoundd(NameRoundd instance);
    partial void DeleteNameRoundd(NameRoundd instance);
    partial void InsertTicket(Ticket instance);
    partial void UpdateTicket(Ticket instance);
    partial void DeleteTicket(Ticket instance);
    partial void InsertLogin(Login instance);
    partial void UpdateLogin(Login instance);
    partial void DeleteLogin(Login instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    #endregion
		
		public dbDataContext() : 
				base(global::Ticket_Reservation_Football.Properties.Settings.Default.UEFA_TicketConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Payment> Payments
		{
			get
			{
				return this.GetTable<Payment>();
			}
		}
		
		public System.Data.Linq.Table<ResultSoccer> ResultSoccers
		{
			get
			{
				return this.GetTable<ResultSoccer>();
			}
		}
		
		public System.Data.Linq.Table<ResultSoccerTotal> ResultSoccerTotals
		{
			get
			{
				return this.GetTable<ResultSoccerTotal>();
			}
		}
		
		public System.Data.Linq.Table<SoccerMatch> SoccerMatches
		{
			get
			{
				return this.GetTable<SoccerMatch>();
			}
		}
		
		public System.Data.Linq.Table<Winner> Winners
		{
			get
			{
				return this.GetTable<Winner>();
			}
		}
		
		public System.Data.Linq.Table<NameRoundd> NameRoundds
		{
			get
			{
				return this.GetTable<NameRoundd>();
			}
		}
		
		public System.Data.Linq.Table<Ticket> Tickets
		{
			get
			{
				return this.GetTable<Ticket>();
			}
		}
		
		public System.Data.Linq.Table<Login> Logins
		{
			get
			{
				return this.GetTable<Login>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payment")]
	public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PaymentID;
		
		private string _PayMethod;
		
		private EntitySet<Customer> _Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentIDChanging(int value);
    partial void OnPaymentIDChanged();
    partial void OnPayMethodChanging(string value);
    partial void OnPayMethodChanged();
    #endregion
		
		public Payment()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PaymentID
		{
			get
			{
				return this._PaymentID;
			}
			set
			{
				if ((this._PaymentID != value))
				{
					this.OnPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentID = value;
					this.SendPropertyChanged("PaymentID");
					this.OnPaymentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayMethod", DbType="NVarChar(30)")]
		public string PayMethod
		{
			get
			{
				return this._PayMethod;
			}
			set
			{
				if ((this._PayMethod != value))
				{
					this.OnPayMethodChanging(value);
					this.SendPropertyChanging();
					this._PayMethod = value;
					this.SendPropertyChanged("PayMethod");
					this.OnPayMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payment_Customer", Storage="_Customers", ThisKey="PaymentID", OtherKey="PaymentID")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Payment = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Payment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResultSoccer")]
	public partial class ResultSoccer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _STT;
		
		private string _SoccerID;
		
		private string _Score;
		
		private EntityRef<SoccerMatch> _SoccerMatch;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSTTChanging(int value);
    partial void OnSTTChanged();
    partial void OnSoccerIDChanging(string value);
    partial void OnSoccerIDChanged();
    partial void OnScoreChanging(string value);
    partial void OnScoreChanged();
    #endregion
		
		public ResultSoccer()
		{
			this._SoccerMatch = default(EntityRef<SoccerMatch>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STT", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int STT
		{
			get
			{
				return this._STT;
			}
			set
			{
				if ((this._STT != value))
				{
					this.OnSTTChanging(value);
					this.SendPropertyChanging();
					this._STT = value;
					this.SendPropertyChanged("STT");
					this.OnSTTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoccerID", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string SoccerID
		{
			get
			{
				return this._SoccerID;
			}
			set
			{
				if ((this._SoccerID != value))
				{
					if (this._SoccerMatch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSoccerIDChanging(value);
					this.SendPropertyChanging();
					this._SoccerID = value;
					this.SendPropertyChanged("SoccerID");
					this.OnSoccerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="VarChar(10)")]
		public string Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SoccerMatch_ResultSoccer", Storage="_SoccerMatch", ThisKey="SoccerID", OtherKey="SoccerID", IsForeignKey=true)]
		public SoccerMatch SoccerMatch
		{
			get
			{
				return this._SoccerMatch.Entity;
			}
			set
			{
				SoccerMatch previousValue = this._SoccerMatch.Entity;
				if (((previousValue != value) 
							|| (this._SoccerMatch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SoccerMatch.Entity = null;
						previousValue.ResultSoccers.Remove(this);
					}
					this._SoccerMatch.Entity = value;
					if ((value != null))
					{
						value.ResultSoccers.Add(this);
						this._SoccerID = value.SoccerID;
					}
					else
					{
						this._SoccerID = default(string);
					}
					this.SendPropertyChanged("SoccerMatch");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResultSoccerTotal")]
	public partial class ResultSoccerTotal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TotalID;
		
		private string _SoccerID;
		
		private string _NameRound;
		
		private string _TotalResult;
		
		private EntitySet<Winner> _Winners;
		
		private EntityRef<SoccerMatch> _SoccerMatch;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTotalIDChanging(int value);
    partial void OnTotalIDChanged();
    partial void OnSoccerIDChanging(string value);
    partial void OnSoccerIDChanged();
    partial void OnNameRoundChanging(string value);
    partial void OnNameRoundChanged();
    partial void OnTotalResultChanging(string value);
    partial void OnTotalResultChanged();
    #endregion
		
		public ResultSoccerTotal()
		{
			this._Winners = new EntitySet<Winner>(new Action<Winner>(this.attach_Winners), new Action<Winner>(this.detach_Winners));
			this._SoccerMatch = default(EntityRef<SoccerMatch>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TotalID
		{
			get
			{
				return this._TotalID;
			}
			set
			{
				if ((this._TotalID != value))
				{
					this.OnTotalIDChanging(value);
					this.SendPropertyChanging();
					this._TotalID = value;
					this.SendPropertyChanged("TotalID");
					this.OnTotalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoccerID", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string SoccerID
		{
			get
			{
				return this._SoccerID;
			}
			set
			{
				if ((this._SoccerID != value))
				{
					if (this._SoccerMatch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSoccerIDChanging(value);
					this.SendPropertyChanging();
					this._SoccerID = value;
					this.SendPropertyChanged("SoccerID");
					this.OnSoccerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameRound", DbType="NVarChar(30)")]
		public string NameRound
		{
			get
			{
				return this._NameRound;
			}
			set
			{
				if ((this._NameRound != value))
				{
					this.OnNameRoundChanging(value);
					this.SendPropertyChanging();
					this._NameRound = value;
					this.SendPropertyChanged("NameRound");
					this.OnNameRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalResult", DbType="VarChar(10)")]
		public string TotalResult
		{
			get
			{
				return this._TotalResult;
			}
			set
			{
				if ((this._TotalResult != value))
				{
					this.OnTotalResultChanging(value);
					this.SendPropertyChanging();
					this._TotalResult = value;
					this.SendPropertyChanged("TotalResult");
					this.OnTotalResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResultSoccerTotal_Winner", Storage="_Winners", ThisKey="TotalID", OtherKey="TotalID")]
		public EntitySet<Winner> Winners
		{
			get
			{
				return this._Winners;
			}
			set
			{
				this._Winners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SoccerMatch_ResultSoccerTotal", Storage="_SoccerMatch", ThisKey="SoccerID", OtherKey="SoccerID", IsForeignKey=true)]
		public SoccerMatch SoccerMatch
		{
			get
			{
				return this._SoccerMatch.Entity;
			}
			set
			{
				SoccerMatch previousValue = this._SoccerMatch.Entity;
				if (((previousValue != value) 
							|| (this._SoccerMatch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SoccerMatch.Entity = null;
						previousValue.ResultSoccerTotals.Remove(this);
					}
					this._SoccerMatch.Entity = value;
					if ((value != null))
					{
						value.ResultSoccerTotals.Add(this);
						this._SoccerID = value.SoccerID;
					}
					else
					{
						this._SoccerID = default(string);
					}
					this.SendPropertyChanged("SoccerMatch");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Winners(Winner entity)
		{
			this.SendPropertyChanging();
			entity.ResultSoccerTotal = this;
		}
		
		private void detach_Winners(Winner entity)
		{
			this.SendPropertyChanging();
			entity.ResultSoccerTotal = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SoccerMatch")]
	public partial class SoccerMatch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SoccerID;
		
		private string _SoccerName;
		
		private string _Showtime;
		
		private System.Nullable<System.DateTime> _Day;
		
		private int _NameRoundID;
		
		private string _NameReferee;
		
		private string _NameStadium;
		
		private System.Nullable<double> _Price;
		
		private System.Nullable<int> _TotalTicket;
		
		private EntitySet<ResultSoccer> _ResultSoccers;
		
		private EntitySet<ResultSoccerTotal> _ResultSoccerTotals;
		
		private EntitySet<Ticket> _Tickets;
		
		private EntityRef<NameRoundd> _NameRoundd;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSoccerIDChanging(string value);
    partial void OnSoccerIDChanged();
    partial void OnSoccerNameChanging(string value);
    partial void OnSoccerNameChanged();
    partial void OnShowtimeChanging(string value);
    partial void OnShowtimeChanged();
    partial void OnDayChanging(System.Nullable<System.DateTime> value);
    partial void OnDayChanged();
    partial void OnNameRoundIDChanging(int value);
    partial void OnNameRoundIDChanged();
    partial void OnNameRefereeChanging(string value);
    partial void OnNameRefereeChanged();
    partial void OnNameStadiumChanging(string value);
    partial void OnNameStadiumChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    partial void OnTotalTicketChanging(System.Nullable<int> value);
    partial void OnTotalTicketChanged();
    #endregion
		
		public SoccerMatch()
		{
			this._ResultSoccers = new EntitySet<ResultSoccer>(new Action<ResultSoccer>(this.attach_ResultSoccers), new Action<ResultSoccer>(this.detach_ResultSoccers));
			this._ResultSoccerTotals = new EntitySet<ResultSoccerTotal>(new Action<ResultSoccerTotal>(this.attach_ResultSoccerTotals), new Action<ResultSoccerTotal>(this.detach_ResultSoccerTotals));
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			this._NameRoundd = default(EntityRef<NameRoundd>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoccerID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SoccerID
		{
			get
			{
				return this._SoccerID;
			}
			set
			{
				if ((this._SoccerID != value))
				{
					this.OnSoccerIDChanging(value);
					this.SendPropertyChanging();
					this._SoccerID = value;
					this.SendPropertyChanged("SoccerID");
					this.OnSoccerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoccerName", DbType="VarChar(50)")]
		public string SoccerName
		{
			get
			{
				return this._SoccerName;
			}
			set
			{
				if ((this._SoccerName != value))
				{
					this.OnSoccerNameChanging(value);
					this.SendPropertyChanging();
					this._SoccerName = value;
					this.SendPropertyChanged("SoccerName");
					this.OnSoccerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Showtime", DbType="VarChar(10)")]
		public string Showtime
		{
			get
			{
				return this._Showtime;
			}
			set
			{
				if ((this._Showtime != value))
				{
					this.OnShowtimeChanging(value);
					this.SendPropertyChanging();
					this._Showtime = value;
					this.SendPropertyChanged("Showtime");
					this.OnShowtimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Day", DbType="DateTime")]
		public System.Nullable<System.DateTime> Day
		{
			get
			{
				return this._Day;
			}
			set
			{
				if ((this._Day != value))
				{
					this.OnDayChanging(value);
					this.SendPropertyChanging();
					this._Day = value;
					this.SendPropertyChanged("Day");
					this.OnDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameRoundID", DbType="Int NOT NULL")]
		public int NameRoundID
		{
			get
			{
				return this._NameRoundID;
			}
			set
			{
				if ((this._NameRoundID != value))
				{
					if (this._NameRoundd.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNameRoundIDChanging(value);
					this.SendPropertyChanging();
					this._NameRoundID = value;
					this.SendPropertyChanged("NameRoundID");
					this.OnNameRoundIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameReferee", DbType="NVarChar(90)")]
		public string NameReferee
		{
			get
			{
				return this._NameReferee;
			}
			set
			{
				if ((this._NameReferee != value))
				{
					this.OnNameRefereeChanging(value);
					this.SendPropertyChanging();
					this._NameReferee = value;
					this.SendPropertyChanged("NameReferee");
					this.OnNameRefereeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameStadium", DbType="NVarChar(90)")]
		public string NameStadium
		{
			get
			{
				return this._NameStadium;
			}
			set
			{
				if ((this._NameStadium != value))
				{
					this.OnNameStadiumChanging(value);
					this.SendPropertyChanging();
					this._NameStadium = value;
					this.SendPropertyChanged("NameStadium");
					this.OnNameStadiumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalTicket", DbType="Int")]
		public System.Nullable<int> TotalTicket
		{
			get
			{
				return this._TotalTicket;
			}
			set
			{
				if ((this._TotalTicket != value))
				{
					this.OnTotalTicketChanging(value);
					this.SendPropertyChanging();
					this._TotalTicket = value;
					this.SendPropertyChanged("TotalTicket");
					this.OnTotalTicketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SoccerMatch_ResultSoccer", Storage="_ResultSoccers", ThisKey="SoccerID", OtherKey="SoccerID")]
		public EntitySet<ResultSoccer> ResultSoccers
		{
			get
			{
				return this._ResultSoccers;
			}
			set
			{
				this._ResultSoccers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SoccerMatch_ResultSoccerTotal", Storage="_ResultSoccerTotals", ThisKey="SoccerID", OtherKey="SoccerID")]
		public EntitySet<ResultSoccerTotal> ResultSoccerTotals
		{
			get
			{
				return this._ResultSoccerTotals;
			}
			set
			{
				this._ResultSoccerTotals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SoccerMatch_Ticket", Storage="_Tickets", ThisKey="SoccerID", OtherKey="SoccerID")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NameRoundd_SoccerMatch", Storage="_NameRoundd", ThisKey="NameRoundID", OtherKey="NameRoundID", IsForeignKey=true)]
		public NameRoundd NameRoundd
		{
			get
			{
				return this._NameRoundd.Entity;
			}
			set
			{
				NameRoundd previousValue = this._NameRoundd.Entity;
				if (((previousValue != value) 
							|| (this._NameRoundd.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NameRoundd.Entity = null;
						previousValue.SoccerMatches.Remove(this);
					}
					this._NameRoundd.Entity = value;
					if ((value != null))
					{
						value.SoccerMatches.Add(this);
						this._NameRoundID = value.NameRoundID;
					}
					else
					{
						this._NameRoundID = default(int);
					}
					this.SendPropertyChanged("NameRoundd");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ResultSoccers(ResultSoccer entity)
		{
			this.SendPropertyChanging();
			entity.SoccerMatch = this;
		}
		
		private void detach_ResultSoccers(ResultSoccer entity)
		{
			this.SendPropertyChanging();
			entity.SoccerMatch = null;
		}
		
		private void attach_ResultSoccerTotals(ResultSoccerTotal entity)
		{
			this.SendPropertyChanging();
			entity.SoccerMatch = this;
		}
		
		private void detach_ResultSoccerTotals(ResultSoccerTotal entity)
		{
			this.SendPropertyChanging();
			entity.SoccerMatch = null;
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.SoccerMatch = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.SoccerMatch = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Winner")]
	public partial class Winner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WinnerID;
		
		private string _SoccerName;
		
		private string _NameCoach;
		
		private string _Total;
		
		private int _TotalID;
		
		private EntityRef<ResultSoccerTotal> _ResultSoccerTotal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWinnerIDChanging(int value);
    partial void OnWinnerIDChanged();
    partial void OnSoccerNameChanging(string value);
    partial void OnSoccerNameChanged();
    partial void OnNameCoachChanging(string value);
    partial void OnNameCoachChanged();
    partial void OnTotalChanging(string value);
    partial void OnTotalChanged();
    partial void OnTotalIDChanging(int value);
    partial void OnTotalIDChanged();
    #endregion
		
		public Winner()
		{
			this._ResultSoccerTotal = default(EntityRef<ResultSoccerTotal>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WinnerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int WinnerID
		{
			get
			{
				return this._WinnerID;
			}
			set
			{
				if ((this._WinnerID != value))
				{
					this.OnWinnerIDChanging(value);
					this.SendPropertyChanging();
					this._WinnerID = value;
					this.SendPropertyChanged("WinnerID");
					this.OnWinnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoccerName", DbType="VarChar(50)")]
		public string SoccerName
		{
			get
			{
				return this._SoccerName;
			}
			set
			{
				if ((this._SoccerName != value))
				{
					this.OnSoccerNameChanging(value);
					this.SendPropertyChanging();
					this._SoccerName = value;
					this.SendPropertyChanged("SoccerName");
					this.OnSoccerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameCoach", DbType="VarChar(30)")]
		public string NameCoach
		{
			get
			{
				return this._NameCoach;
			}
			set
			{
				if ((this._NameCoach != value))
				{
					this.OnNameCoachChanging(value);
					this.SendPropertyChanging();
					this._NameCoach = value;
					this.SendPropertyChanged("NameCoach");
					this.OnNameCoachChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="VarChar(30)")]
		public string Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalID", DbType="Int NOT NULL")]
		public int TotalID
		{
			get
			{
				return this._TotalID;
			}
			set
			{
				if ((this._TotalID != value))
				{
					if (this._ResultSoccerTotal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTotalIDChanging(value);
					this.SendPropertyChanging();
					this._TotalID = value;
					this.SendPropertyChanged("TotalID");
					this.OnTotalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResultSoccerTotal_Winner", Storage="_ResultSoccerTotal", ThisKey="TotalID", OtherKey="TotalID", IsForeignKey=true)]
		public ResultSoccerTotal ResultSoccerTotal
		{
			get
			{
				return this._ResultSoccerTotal.Entity;
			}
			set
			{
				ResultSoccerTotal previousValue = this._ResultSoccerTotal.Entity;
				if (((previousValue != value) 
							|| (this._ResultSoccerTotal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResultSoccerTotal.Entity = null;
						previousValue.Winners.Remove(this);
					}
					this._ResultSoccerTotal.Entity = value;
					if ((value != null))
					{
						value.Winners.Add(this);
						this._TotalID = value.TotalID;
					}
					else
					{
						this._TotalID = default(int);
					}
					this.SendPropertyChanged("ResultSoccerTotal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NameRoundd")]
	public partial class NameRoundd : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NameRoundID;
		
		private string _NameRound;
		
		private EntitySet<SoccerMatch> _SoccerMatches;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameRoundIDChanging(int value);
    partial void OnNameRoundIDChanged();
    partial void OnNameRoundChanging(string value);
    partial void OnNameRoundChanged();
    #endregion
		
		public NameRoundd()
		{
			this._SoccerMatches = new EntitySet<SoccerMatch>(new Action<SoccerMatch>(this.attach_SoccerMatches), new Action<SoccerMatch>(this.detach_SoccerMatches));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameRoundID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NameRoundID
		{
			get
			{
				return this._NameRoundID;
			}
			set
			{
				if ((this._NameRoundID != value))
				{
					this.OnNameRoundIDChanging(value);
					this.SendPropertyChanging();
					this._NameRoundID = value;
					this.SendPropertyChanged("NameRoundID");
					this.OnNameRoundIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameRound", DbType="NVarChar(50)")]
		public string NameRound
		{
			get
			{
				return this._NameRound;
			}
			set
			{
				if ((this._NameRound != value))
				{
					this.OnNameRoundChanging(value);
					this.SendPropertyChanging();
					this._NameRound = value;
					this.SendPropertyChanged("NameRound");
					this.OnNameRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NameRoundd_SoccerMatch", Storage="_SoccerMatches", ThisKey="NameRoundID", OtherKey="NameRoundID")]
		public EntitySet<SoccerMatch> SoccerMatches
		{
			get
			{
				return this._SoccerMatches;
			}
			set
			{
				this._SoccerMatches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SoccerMatches(SoccerMatch entity)
		{
			this.SendPropertyChanging();
			entity.NameRoundd = this;
		}
		
		private void detach_SoccerMatches(SoccerMatch entity)
		{
			this.SendPropertyChanging();
			entity.NameRoundd = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tickets")]
	public partial class Ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TicketID;
		
		private int _CustomerID;
		
		private int _NameRoundID;
		
		private string _SoccerID;
		
		private System.Nullable<int> _Quantity;
		
		private EntityRef<SoccerMatch> _SoccerMatch;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketIDChanging(int value);
    partial void OnTicketIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnNameRoundIDChanging(int value);
    partial void OnNameRoundIDChanged();
    partial void OnSoccerIDChanging(string value);
    partial void OnSoccerIDChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    #endregion
		
		public Ticket()
		{
			this._SoccerMatch = default(EntityRef<SoccerMatch>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TicketID
		{
			get
			{
				return this._TicketID;
			}
			set
			{
				if ((this._TicketID != value))
				{
					this.OnTicketIDChanging(value);
					this.SendPropertyChanging();
					this._TicketID = value;
					this.SendPropertyChanged("TicketID");
					this.OnTicketIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameRoundID", DbType="Int NOT NULL")]
		public int NameRoundID
		{
			get
			{
				return this._NameRoundID;
			}
			set
			{
				if ((this._NameRoundID != value))
				{
					this.OnNameRoundIDChanging(value);
					this.SendPropertyChanging();
					this._NameRoundID = value;
					this.SendPropertyChanged("NameRoundID");
					this.OnNameRoundIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoccerID", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string SoccerID
		{
			get
			{
				return this._SoccerID;
			}
			set
			{
				if ((this._SoccerID != value))
				{
					if (this._SoccerMatch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSoccerIDChanging(value);
					this.SendPropertyChanging();
					this._SoccerID = value;
					this.SendPropertyChanged("SoccerID");
					this.OnSoccerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SoccerMatch_Ticket", Storage="_SoccerMatch", ThisKey="SoccerID", OtherKey="SoccerID", IsForeignKey=true)]
		public SoccerMatch SoccerMatch
		{
			get
			{
				return this._SoccerMatch.Entity;
			}
			set
			{
				SoccerMatch previousValue = this._SoccerMatch.Entity;
				if (((previousValue != value) 
							|| (this._SoccerMatch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SoccerMatch.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._SoccerMatch.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._SoccerID = value.SoccerID;
					}
					else
					{
						this._SoccerID = default(string);
					}
					this.SendPropertyChanged("SoccerMatch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Ticket", Storage="_Customer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Login")]
	public partial class Login : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TenTaiKhoan;
		
		private string _MatKhau;
		
		private string _Email;
		
		private EntitySet<Customer> _Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenTaiKhoanChanging(string value);
    partial void OnTenTaiKhoanChanged();
    partial void OnMatKhauChanging(string value);
    partial void OnMatKhauChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Login()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenTaiKhoan", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TenTaiKhoan
		{
			get
			{
				return this._TenTaiKhoan;
			}
			set
			{
				if ((this._TenTaiKhoan != value))
				{
					this.OnTenTaiKhoanChanging(value);
					this.SendPropertyChanging();
					this._TenTaiKhoan = value;
					this.SendPropertyChanged("TenTaiKhoan");
					this.OnTenTaiKhoanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatKhau", DbType="NVarChar(50)")]
		public string MatKhau
		{
			get
			{
				return this._MatKhau;
			}
			set
			{
				if ((this._MatKhau != value))
				{
					this.OnMatKhauChanging(value);
					this.SendPropertyChanging();
					this._MatKhau = value;
					this.SendPropertyChanged("MatKhau");
					this.OnMatKhauChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Login_Customer", Storage="_Customers", ThisKey="TenTaiKhoan", OtherKey="TenTaiKhoan")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Login = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Login = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerID;
		
		private string _Names;
		
		private string _TelephoneCustomer;
		
		private string _Address;
		
		private string _Gender;
		
		private string _BirthDate;
		
		private int _PaymentID;
		
		private string _TenTaiKhoan;
		
		private EntitySet<Ticket> _Tickets;
		
		private EntityRef<Payment> _Payment;
		
		private EntityRef<Login> _Login;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnNamesChanging(string value);
    partial void OnNamesChanged();
    partial void OnTelephoneCustomerChanging(string value);
    partial void OnTelephoneCustomerChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnBirthDateChanging(string value);
    partial void OnBirthDateChanged();
    partial void OnPaymentIDChanging(int value);
    partial void OnPaymentIDChanged();
    partial void OnTenTaiKhoanChanging(string value);
    partial void OnTenTaiKhoanChanged();
    #endregion
		
		public Customer()
		{
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			this._Payment = default(EntityRef<Payment>);
			this._Login = default(EntityRef<Login>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Names", DbType="NVarChar(40)")]
		public string Names
		{
			get
			{
				return this._Names;
			}
			set
			{
				if ((this._Names != value))
				{
					this.OnNamesChanging(value);
					this.SendPropertyChanging();
					this._Names = value;
					this.SendPropertyChanged("Names");
					this.OnNamesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelephoneCustomer", DbType="VarChar(30)")]
		public string TelephoneCustomer
		{
			get
			{
				return this._TelephoneCustomer;
			}
			set
			{
				if ((this._TelephoneCustomer != value))
				{
					this.OnTelephoneCustomerChanging(value);
					this.SendPropertyChanging();
					this._TelephoneCustomer = value;
					this.SendPropertyChanged("TelephoneCustomer");
					this.OnTelephoneCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(30)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(20)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="NVarChar(40)")]
		public string BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentID", DbType="Int NOT NULL")]
		public int PaymentID
		{
			get
			{
				return this._PaymentID;
			}
			set
			{
				if ((this._PaymentID != value))
				{
					if (this._Payment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentID = value;
					this.SendPropertyChanged("PaymentID");
					this.OnPaymentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenTaiKhoan", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TenTaiKhoan
		{
			get
			{
				return this._TenTaiKhoan;
			}
			set
			{
				if ((this._TenTaiKhoan != value))
				{
					if (this._Login.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenTaiKhoanChanging(value);
					this.SendPropertyChanging();
					this._TenTaiKhoan = value;
					this.SendPropertyChanged("TenTaiKhoan");
					this.OnTenTaiKhoanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Ticket", Storage="_Tickets", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payment_Customer", Storage="_Payment", ThisKey="PaymentID", OtherKey="PaymentID", IsForeignKey=true)]
		public Payment Payment
		{
			get
			{
				return this._Payment.Entity;
			}
			set
			{
				Payment previousValue = this._Payment.Entity;
				if (((previousValue != value) 
							|| (this._Payment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Payment.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Payment.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._PaymentID = value.PaymentID;
					}
					else
					{
						this._PaymentID = default(int);
					}
					this.SendPropertyChanged("Payment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Login_Customer", Storage="_Login", ThisKey="TenTaiKhoan", OtherKey="TenTaiKhoan", IsForeignKey=true)]
		public Login Login
		{
			get
			{
				return this._Login.Entity;
			}
			set
			{
				Login previousValue = this._Login.Entity;
				if (((previousValue != value) 
							|| (this._Login.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Login.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Login.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._TenTaiKhoan = value.TenTaiKhoan;
					}
					else
					{
						this._TenTaiKhoan = default(string);
					}
					this.SendPropertyChanged("Login");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
}
#pragma warning restore 1591
